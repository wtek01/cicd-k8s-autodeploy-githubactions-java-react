version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_MAX_CLIENT_CNXNS: 0
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SESSION_TIMEOUT_MS: 40000
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 1
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_MAX_SESSION_TIMEOUT: 40000
      ZOOKEEPER_MIN_SESSION_TIMEOUT: 4000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVER_1: zookeeper:2888:3888
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
      ZOOKEEPER_ELECTION_ALG: 3
      ZOOKEEPER_SERVER_CNXN_FACTORY: org.apache.zookeeper.server.NettyServerCnxnFactory
      ZOOKEEPER_SERVER_CNXN_FACTORY_MAX_CLIENT_CNXNS: 0
      ZOOKEEPER_SERVER_CNXN_FACTORY_MAX_CLIENT_CNXNS_PER_IP: 0
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - app-network
    restart: on-failure:3

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  user-service:
    build:
      context: ../..
      dockerfile: backend/user-service/Dockerfile
    container_name: user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: userdb
      DB_USER: postgres
      DB_PASSWORD: postgres
    ports:
      - "8081:8081"
    depends_on:
      - kafka
      - postgres
    networks:
      - app-network
    restart: on-failure:3

  order-service:
    build:
      context: ../..
      dockerfile: backend/order-service/Dockerfile
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: orderdb
      DB_USER: postgres
      DB_PASSWORD: postgres
    ports:
      - "8082:8082"
    depends_on:
      - kafka
      - postgres
    networks:
      - app-network
    restart: on-failure:3

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        VITE_ENVIRONMENT: docker
        VITE_USER_SERVICE_URL: "http://localhost:8081"
        VITE_ORDER_SERVICE_URL: "http://localhost:8082"
    container_name: frontend
    ports:
      - "80:80"
    environment:
      ENVIRONMENT: docker
      USER_SERVICE_URL: "http://localhost:8081"
      ORDER_SERVICE_URL: "http://localhost:8082"
      FRONTEND_URL: "http://docker.frontend.com"
    depends_on:
      - user-service
      - order-service
    networks:
      - app-network
    restart: on-failure:3

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge

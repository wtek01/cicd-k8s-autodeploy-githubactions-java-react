# .github/workflows/main-ci-workflow.yml
name: Build and Publish

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Pour déclencher manuellement le workflow

jobs:
  build-and-test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure PostgreSQL is running
        shell: pwsh
        run: |
          # Check if your local PostgreSQL is running
          # You might need to adjust this based on your PostgreSQL installation
          $pgService = Get-Service -Name postgresql* -ErrorAction SilentlyContinue
          if ($pgService -and $pgService.Status -eq 'Running') {
            echo "PostgreSQL service is running"
          } else {
            echo "WARNING: PostgreSQL service might not be running. Please ensure it is started."
            # You can try to start it if needed:
            # Start-Service -Name postgresql-x64-14
          }

      - name: Create databases
        shell: pwsh
        run: |
          try {
            $env:PGPASSWORD = "postgres"
            psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS userdb;"
            psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS orderdb;"
            psql -h localhost -U postgres -c "CREATE DATABASE userdb;"
            psql -h localhost -U postgres -c "CREATE DATABASE orderdb;"
            echo "Databases created successfully"
          } catch {
            echo "Error creating databases: $_"
            echo "Continuing with the workflow..."
          }

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and test with Maven
        shell: pwsh
        run: |
          cd backend
          mvn -B clean verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/orderdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            backend/**/target/surefire-reports/
            backend/**/target/failsafe-reports/
          retention-days: 5

  build-and-push-images:
    needs: build-and-test
    runs-on: self-hosted
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [user-service, order-service, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        shell: pwsh
        run: |
          # Ensure Docker is running
          docker --version
          echo "Docker is set up and running"

      - name: Login to Docker Hub
        shell: pwsh
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Extract version from pom.xml
        shell: pwsh
        id: get-version
        run: |
          $version = Select-String -Path backend/pom.xml -Pattern "<version>(.*?)</version>" | Select-Object -First 1 | ForEach-Object { $_.Matches.Groups[1].Value }
          $version = $version -replace "[^0-9\.]", ""
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Using version: $version"

      - name: Set Build Context and Dockerfile Path
        shell: pwsh
        id: set-context
        run: |
          $service = "${{ matrix.service }}"
          if ($service -eq "frontend") {
            echo "context=frontend" >> $env:GITHUB_OUTPUT
            echo "dockerfile=frontend/Dockerfile" >> $env:GITHUB_OUTPUT
          } else {
            echo "context=backend" >> $env:GITHUB_OUTPUT
            echo "dockerfile=backend/$service/Dockerfile" >> $env:GITHUB_OUTPUT
          }

      - name: Build and push Docker image
        shell: pwsh
        run: |
          $service = "${{ matrix.service }}"
          $username = "${{ secrets.DOCKERHUB_USERNAME }}"
          $version = "${{ steps.get-version.outputs.version }}"
          $context = "${{ steps.set-context.outputs.context }}"
          $dockerfile = "${{ steps.set-context.outputs.dockerfile }}"

          # Build the Docker image
          docker build -t "$username/$service:$version" -t "$username/$service:latest" -f "$dockerfile" "$context"

          # Push the images to Docker Hub
          docker push "$username/$service:$version"
          docker push "$username/$service:latest"

  update-k8s-manifests:
    needs: build-and-push-images
    runs-on: self-hosted
    permissions:
      contents: write # Important: donne les permissions d'écriture
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from pom.xml
        shell: pwsh
        id: get-version
        run: |
          $version = Select-String -Path backend/pom.xml -Pattern "<version>(.*?)</version>" | Select-Object -First 1 | ForEach-Object { $_.Matches.Groups[1].Value }
          $version = $version -replace "[^0-9\.]", ""
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Using version: $version"

      - name: Update Kubernetes manifests
        shell: pwsh
        run: |
          # Update manifests with new image versions
          $username = "${{ secrets.DOCKERHUB_USERNAME }}"
          $version = "${{ steps.get-version.outputs.version }}"

          (Get-Content infrastructure/k8s/user-service.yml) -replace "image: $username/user-service:.*", "image: $username/user-service:$version" | Set-Content infrastructure/k8s/user-service.yml
          (Get-Content infrastructure/k8s/order-service.yml) -replace "image: $username/order-service:.*", "image: $username/order-service:$version" | Set-Content infrastructure/k8s/order-service.yml
          (Get-Content infrastructure/k8s/frontend-deployment.yml) -replace "image: $username/frontend:.*", "image: $username/frontend:$version" | Set-Content infrastructure/k8s/frontend-deployment.yml

      - name: Commit and push updated manifests
        shell: pwsh
        run: |
          git config --local user.email "wtek01@gmail.com"
          git config --local user.name "GitHub Actions Bot"
          git add infrastructure/k8s/*.yml

          # Try to commit and handle the case where there are no changes
          $hasChanges = git diff --staged --quiet
          if ($LASTEXITCODE -eq 0) {
            echo "No changes to commit"
          } else {
            git commit -m "ci: update k8s manifests with new image versions"
            git push origin main --force
          }

# .github/workflows/main-ci-workflow.yml
name: Build and Publish

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create databases
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE userdb;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE orderdb;"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and test with Maven
        run: |
          cd backend
          mvn -B clean verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/orderdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            backend/**/target/surefire-reports/
            backend/**/target/failsafe-reports/
          retention-days: 5

  build-and-push-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [user-service, order-service, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate frontend version
        id: frontend-version
        if: matrix.service == 'frontend'
        run: |
          VERSION=$(date +%Y.%m.%d-%H%M%S)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using frontend version: $VERSION"

      - name: Extract version from pom.xml for backend services
        id: get-version
        if: matrix.service != 'frontend'
        run: |
          VERSION=$(grep -m1 "<version>" backend/pom.xml | sed 's/[^0-9\.]//g')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ matrix.service == 'frontend' && steps.frontend-version.outputs.version || steps.get-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set Build Context and Dockerfile Path
        id: set-context
        run: |
          if [ "${{ matrix.service }}" == "frontend" ]; then
            echo "context=frontend" >> $GITHUB_OUTPUT
            echo "dockerfile=frontend/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "context=backend" >> $GITHUB_OUTPUT
            echo "dockerfile=backend/${{ matrix.service }}/Dockerfile" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ${{ steps.set-context.outputs.context }}
          file: ${{ steps.set-context.outputs.dockerfile }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ matrix.service == 'frontend' && steps.frontend-version.outputs.version || steps.get-version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache,mode=max
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_USER_SERVICE_URL=${{ secrets.VITE_USER_SERVICE_URL }}
            VITE_ORDER_SERVICE_URL=${{ secrets.VITE_ORDER_SERVICE_URL }}
            VITE_ENVIRONMENT=production

      - name: Verify image push
        if: matrix.service == 'frontend'
        run: |
          # Wait a moment for Docker Hub to process the push
          sleep 10
          # Try to pull the image to verify it exists
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ steps.frontend-version.outputs.version }}
          if [ $? -ne 0 ]; then
            echo "Failed to verify image push"
            exit 1
          fi

  update-k8s-manifests:
    needs: build-and-push-images
    runs-on: self-hosted
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate frontend version
        id: frontend-version
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          echo "version=$timestamp" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "Using frontend version: $timestamp"

      - name: Extract version from pom.xml for backend services
        id: get-version
        shell: powershell
        run: |
          $versionLine = Select-String -Path backend/pom.xml -Pattern "<version>(.*?)</version>" | Select-Object -First 1
          $version = $versionLine -replace ".*<version>(.*?)</version>.*", '$1'
          $version = $version -replace "[^0-9\.]", ""
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "Using version: $version"

      - name: Update Kubernetes manifests
        shell: powershell
        run: |
          # Update backend service manifests
          (Get-Content infrastructure/k8s/user-service.yml) -replace "image: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:.*", "image: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ steps.get-version.outputs.version }}" | Set-Content infrastructure/k8s/user-service.yml
          (Get-Content infrastructure/k8s/order-service.yml) -replace "image: ${{ secrets.DOCKERHUB_USERNAME }}/order-service:.*", "image: ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.get-version.outputs.version }}" | Set-Content infrastructure/k8s/order-service.yml

          # Create a temporary deployment file with the correct version
          $version = "${{ steps.frontend-version.outputs.version }}"
          $deployment = Get-Content infrastructure/k8s/frontend-deployment.yml -Raw
          $deployment = $deployment.Replace('${VERSION}', $version)
          $deployment | Set-Content "temp-frontend-deployment.yml"

          # Apply the deployment with the correct version
          kubectl apply -f temp-frontend-deployment.yml

          # Clean up
          Remove-Item temp-frontend-deployment.yml

      - name: Skip commit for frontend deployment
        shell: powershell
        run: |
          git config --local user.email "wtek01@gmail.com"
          git config --local user.name "GitHub Actions Bot"
          git add infrastructure/k8s/user-service.yml infrastructure/k8s/order-service.yml

          # Try to commit only backend changes
          $commitOutput = git commit -m "ci: update backend service manifests with new image versions" 2>&1
          if ($commitOutput -match "nothing to commit" -or $LASTEXITCODE -eq 0) {
              Write-Host "Commit successful or nothing to commit"
              git push origin main
          }

# .github/workflows/kubernetes-deploy-workflow.yml
name: Deploy to Kubernetes

on:
  push:
    branches: [main, master]
    paths:
      - "infrastructure/k8s/**" # Se déclenche sur les modifications des fichiers dans le dossier k8s
  workflow_dispatch: # Pour déclencher manuellement le workflow
  workflow_run:
    workflows: ["Build and Publish"]
    types:
      - completed
    branches: [main, master]

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup kubeconfig
        shell: powershell
        run: |
          if (!(Test-Path -Path "$HOME/.kube")) {
            New-Item -Path "$HOME/.kube" -ItemType Directory
          }
          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("${{ secrets.KUBE_CONFIG }}")) | Out-File -FilePath "$HOME/.kube/config" -Encoding utf8
          # Définir les permissions appropriées
          $acl = Get-Acl -Path "$HOME/.kube/config"
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("$env:USERNAME","FullControl","Allow")
          $acl.SetAccessRule($accessRule)
          $acl | Set-Acl -Path "$HOME/.kube/config"

      - name: Verify kubectl configuration
        shell: powershell
        run: |
          kubectl version --client
          Write-Host "Attempting to connect to cluster..."
          try {
            kubectl get nodes
          } catch {
            Write-Host "Failed to connect to cluster"
          }

      - name: Create namespace if not exists
        shell: powershell
        run: |
          Write-Host "Creating microservices namespace if it doesn't exist..."
          kubectl create namespace microservices --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests
        shell: powershell
        run: |
          Write-Host "Applying Kubernetes configurations..."
          # First apply the main microservices resources
          kubectl apply -k infrastructure/k8s/

          # Then apply ingress resources in their proper namespaces
          Write-Host "Applying ingress configurations..."
          kubectl apply -f infrastructure/k8s/ingress.yml -n default
          kubectl apply -f infrastructure/k8s/monitoring-ingress.yml -n monitoring

      - name: Force redeploy services
        shell: powershell
        run: |
          Write-Host "Forcing redeployment to ensure new images are used..."

          # Check for available images in deployments
          Write-Host "Current images in deployments:"
          kubectl get deployment/user-service -n microservices -o jsonpath="{..image}" | Write-Host
          kubectl get deployment/order-service -n microservices -o jsonpath="{..image}" | Write-Host

          # Check resource quotas
          Write-Host "Checking resource quotas in namespace:"
          kubectl describe namespace microservices

          # Restart deployments
          kubectl rollout restart deployment/user-service -n microservices
          kubectl rollout restart deployment/order-service -n microservices

          # Wait for restart to begin
          Write-Host "Waiting for rollout to begin..."
          Start-Sleep -Seconds 5

      - name: Check deployment events
        shell: powershell
        run: |
          Write-Host "Checking events in microservices namespace..."
          kubectl get events -n microservices --sort-by=.metadata.creationTimestamp

          Write-Host "Checking if images can be pulled..."
          kubectl get pods -n microservices -o jsonpath="{..image}" | tr -s '[[:space:]]' '\n' | Sort-Object | Get-Unique | ForEach-Object {
            Write-Host "Checking image: $_"
            # Log image pull status (if available)
            kubectl get pods -n microservices | Select-String -Pattern "ImagePull"
          }

          Write-Host "Checking Minikube resources..."
          minikube status
          kubectl top nodes || Write-Host "Metrics server not available"

      - name: Check pod status and logs
        shell: powershell
        run: |
          Write-Host "Waiting for pods to be created..."
          Start-Sleep -Seconds 30

          Write-Host "Checking pod status..."
          kubectl get pods -n microservices

          Write-Host "Checking user-service pods..."
          $userPods = kubectl get pods -n microservices -l app=user-service -o jsonpath="{.items[*].metadata.name}"
          if ($userPods) {
            foreach ($pod in $userPods.Split()) {
              Write-Host "Logs for ${pod}:"
              kubectl logs ${pod} -n microservices --tail=50
            }
          } else {
            Write-Host "No user-service pods found"
          }

          Write-Host "Checking order-service pods..."
          $orderPods = kubectl get pods -n microservices -l app=order-service -o jsonpath="{.items[*].metadata.name}"
          if ($orderPods) {
            foreach ($pod in $orderPods.Split()) {
              Write-Host "Logs for ${pod}:"
              kubectl logs ${pod} -n microservices --tail=50
            }
          } else {
            Write-Host "No order-service pods found"
          }

      - name: Verify deployment
        shell: powershell
        run: |
          Write-Host "Verifying deployments..."

          # Check deployments details
          Write-Host "Deployment details:"
          kubectl describe deployment/user-service -n microservices
          kubectl describe deployment/order-service -n microservices

          # Check pod details
          Write-Host "Pod details:"
          kubectl describe pods -n microservices -l app=user-service
          kubectl describe pods -n microservices -l app=order-service

          # Increase timeout to 10 minutes to allow more time for rollout
          Write-Host "Checking deployment status with extended timeout:"
          kubectl rollout status deployment/user-service -n microservices --timeout=10m
          kubectl rollout status deployment/order-service -n microservices --timeout=10m
          Write-Host "All deployments successfully rolled out!"

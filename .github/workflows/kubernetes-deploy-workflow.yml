# .github/workflows/kubernetes-deploy-workflow.yml
name: Deploy to Kubernetes

on:
  push:
    branches: [main, master, "feature/**"]
    paths:
      - "infrastructure/k8s/**" # Se déclenche sur les modifications des fichiers dans le dossier k8s
  workflow_dispatch: # Pour déclencher manuellement le workflow
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: ""
  workflow_run:
    workflows: ["Build and Publish"]
    types:
      - completed
    branches: [main, master, "feature/**"]

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE_NAME: wtek01/frontend
  FRONTEND_IMAGE_TAG: 0.3.1
  USER_SERVICE_IMAGE_NAME: wtek01/user-service
  USER_SERVICE_IMAGE_TAG: 0.3.0
  ORDER_SERVICE_IMAGE_NAME: wtek01/order-service
  ORDER_SERVICE_IMAGE_TAG: 0.3.0
  DOCKERHUB_USERNAME: wtek01

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    permissions:
      contents: read
    steps:
      - name: Display trigger information
        run: |
          Write-Host "Workflow triggered by: ${{ github.event_name }}"
          if ('${{ github.event_name }}' -eq 'workflow_run') {
            Write-Host "Triggered by workflow: ${{ github.event.workflow.name }}"
            Write-Host "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
            Write-Host "Workflow head branch: ${{ github.event.workflow_run.head_branch }}"
          } elseif ('${{ github.event_name }}' -eq 'workflow_dispatch') {
            Write-Host "Workflow dispatch with branch: ${{ github.event.inputs.branch || github.ref_name }}"
          } else {
            Write-Host "Direct trigger on branch: ${{ github.ref_name }}"
          }

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.event.workflow_run.head_branch || github.ref }}

      - name: Get branch name
        id: branch
        run: |
          if ('${{ github.event_name }}' -eq 'workflow_run') {
            # For workflow_run events, get the branch that triggered the workflow
            $branchName = '${{ github.event.workflow_run.head_branch }}'
          } elseif ('${{ github.event_name }}' -eq 'workflow_dispatch' -and '${{ github.event.inputs.branch }}' -ne '') {
            # For workflow_dispatch events with branch input
            $branchName = '${{ github.event.inputs.branch }}'
          } else {
            # For push and workflow_dispatch events without branch input, use ref_name
            $branchName = '${{ github.ref_name }}'
          }
          Write-Host "Branch name: $branchName"
          echo "name=$branchName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Set deployment environment
        id: deployment-env
        run: |
          $branchName = '${{ steps.branch.outputs.name }}'
          $isFeatureBranch = $branchName -like 'feature/*'

          Write-Host "Processing deployment for branch: $branchName (isFeature: $isFeatureBranch)"

          if ($isFeatureBranch) {
            # Convert feature/name to feature-name for namespace
            $namespace = "feature-" + $branchName.Substring(8).ToLower().Replace('/', '-')
            $deploymentSuffix = "-$namespace"
            $imageTag = $branchName.Replace('/', '-')
            
            echo "namespace=$namespace" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "deployment_suffix=$deploymentSuffix" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "image_tag=$imageTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            
            Write-Host "Feature branch deployment details:"
            Write-Host "  Namespace: $namespace"
            Write-Host "  Suffix: $deploymentSuffix"
            Write-Host "  Image Tag: $imageTag"
          } else {
            echo "namespace=microservices" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "deployment_suffix=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "image_tag=latest" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Main branch deployment to namespace: microservices"
          }

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Setup kubeconfig
        shell: powershell
        run: |
          if (!(Test-Path -Path "$HOME/.kube")) {
            New-Item -Path "$HOME/.kube" -ItemType Directory
          }

          # Create kubeconfig content with correct line endings
          $content = "apiVersion: v1`nkind: Config`nclusters:`n- cluster:`n    certificate-authority: C:\Users\gmelk\.minikube\ca.crt`n    server: https://127.0.0.1:59455`n  name: minikube`ncontexts:`n- context:`n    cluster: minikube`n    namespace: default`n    user: minikube`n  name: minikube`ncurrent-context: minikube`npreferences: {}`nusers:`n- name: minikube`n  user:`n    client-certificate: C:\Users\gmelk\.minikube\profiles\minikube\client.crt`n    client-key: C:\Users\gmelk\.minikube\profiles\minikube\client.key"

          # Write to config file
          $content | Out-File -FilePath "$HOME/.kube/config" -Encoding utf8 -Force

          # Set permissions
          $acl = Get-Acl -Path "$HOME/.kube/config"
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("$env:USERNAME","FullControl","Allow")
          $acl.SetAccessRule($accessRule)
          $acl | Set-Acl -Path "$HOME/.kube/config"

      - name: Verify kubectl configuration
        shell: powershell
        run: |
          kubectl version --client
          Write-Host "Attempting to connect to cluster..."
          try {
            kubectl get nodes
          } catch {
            Write-Host "Failed to connect to cluster"
          }

      - name: Create Kubernetes namespace if not exists
        shell: powershell
        run: |
          Write-Host "Creating or verifying namespace: ${{ steps.deployment-env.outputs.namespace }}..."
          kubectl create namespace ${{ steps.deployment-env.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Set up RBAC for GitHub Actions
        shell: powershell
        run: |
          Write-Host "Setting up RBAC permissions..."

          # Créer un fichier YAML pour toutes les ressources RBAC
          $rbacYaml = @"
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: github-actions
            namespace: ${{ steps.deployment-env.outputs.namespace }}
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: github-actions-role
          rules:
          - apiGroups: [""]
            resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "configmaps", "secrets"]
            verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
          - apiGroups: ["apps"]
            resources: ["deployments", "replicasets", "statefulsets"]
            verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
          - apiGroups: ["networking.k8s.io"]
            resources: ["ingresses", "endpointslices"]
            verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
          - apiGroups: ["batch"]
            resources: ["jobs", "cronjobs"]
            verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: github-actions-binding
          subjects:
          - kind: ServiceAccount
            name: github-actions
            namespace: ${{ steps.deployment-env.outputs.namespace }}
          roleRef:
            kind: ClusterRole
            name: github-actions-role
            apiGroup: rbac.authorization.k8s.io
          "@

          $rbacYaml | Out-File -FilePath "rbac.yaml" -Encoding utf8
          kubectl apply -f rbac.yaml

          # Attendre que les ressources RBAC soient appliquées
          Start-Sleep -Seconds 5

      - name: Deploy Kafka and Zookeeper
        shell: powershell
        run: |
          Write-Host "Deploying Kafka and Zookeeper..."
          kubectl apply -f infrastructure/k8s/kafka-statefulset.yml
          kubectl apply -f infrastructure/k8s/zookeeper.yml
          Start-Sleep -Seconds 10

      - name: Clean up existing Ingress resources
        shell: powershell
        run: |
          Write-Host "Cleaning up existing Ingress resources..."
          kubectl delete ingress frontend-ingress microservices-ingress -n ${{ steps.deployment-env.outputs.namespace }} --ignore-not-found
          Start-Sleep -Seconds 5

      - name: Apply Kubernetes manifests
        shell: powershell
        run: |
          Write-Host "Applying Kubernetes manifests for branch: ${{ steps.branch.outputs.name }}..."
          $namespace = "${{ steps.deployment-env.outputs.namespace }}"
          $suffix = "${{ steps.deployment-env.outputs.deployment_suffix }}"
          $imageTag = "${{ steps.deployment-env.outputs.image_tag }}"

          # Create the namespaces
          Write-Host "Ensuring namespace exists: $namespace"
          kubectl create namespace $namespace --dry-run=client -o yaml | kubectl apply -f -

          # Try using kustomize
          $kustomizeSuccess = $false
          if (Test-Path "infrastructure/k8s/overlays/${{ steps.branch.outputs.name }}") {
            Write-Host "Found kustomize overlay for branch, trying to deploy using it..."
            try {
              kubectl apply -k "infrastructure/k8s/overlays/${{ steps.branch.outputs.name }}" -n $namespace
              $kustomizeSuccess = $LASTEXITCODE -eq 0
              if ($kustomizeSuccess) {
                Write-Host "Kustomize deployment successful."
              }
            } catch {
              Write-Host "Kustomize overlay failed: $_"
            }
          }

          # Fall back to manual application if kustomize fails
          if (-not $kustomizeSuccess) {
            Write-Host "Using individual file application..."
            
            # Deploy infrastructure resources
            Write-Host "Deploying infrastructure resources..."
            kubectl apply -f infrastructure/k8s/postgres-deployment.yml -n $namespace
            # Zookeeper and Kafka are already deployed in the microservices namespace
            # Just use those instances as they can be shared
            
            # Set host and service variables for feature branch
            if ($namespace -ne "microservices") {
              $frontendHost = "frontend-$namespace.microservices.local"
              $apiHost = "api-$namespace.microservices.local"
              $frontendService = "frontend$suffix"
              $userService = "user-service$suffix" 
              $orderService = "order-service$suffix"
            } else {
              $frontendHost = "frontend.microservices.local"
              $apiHost = "api.microservices.local"
              $frontendService = "frontend"
              $userService = "user-service"
              $orderService = "order-service"
            }
            
            # Wait for infrastructure to be ready
            Write-Host "Waiting for infrastructure to be ready..."
            Start-Sleep -Seconds 10
            
            # Process and apply user-service
            Write-Host "Processing user-service manifest..."
            $userServiceYaml = Get-Content infrastructure/k8s/user-service.yml -Raw
            $userServiceYaml = $userServiceYaml.Replace('${NAMESPACE}', $namespace)
            $userServiceYaml = $userServiceYaml -replace 'name: user-service', "name: user-service$suffix"
            $userServiceYaml = $userServiceYaml -replace 'app: user-service', "app: user-service$suffix" 
            $userServiceYaml = $userServiceYaml -replace 'image: wtek01/user-service:.*', "image: wtek01/user-service:$imageTag"
            $userServiceYaml | Out-File -FilePath "temp-user-service.yml" -Encoding utf8
            kubectl apply -f temp-user-service.yml
            
            # Process and apply order-service
            Write-Host "Processing order-service manifest..."
            $orderServiceYaml = Get-Content infrastructure/k8s/order-service.yml -Raw
            $orderServiceYaml = $orderServiceYaml.Replace('${NAMESPACE}', $namespace)
            $orderServiceYaml = $orderServiceYaml -replace 'name: order-service', "name: order-service$suffix" 
            $orderServiceYaml = $orderServiceYaml -replace 'app: order-service', "app: order-service$suffix"
            $orderServiceYaml = $orderServiceYaml -replace 'image: wtek01/order-service:.*', "image: wtek01/order-service:$imageTag"
            $orderServiceYaml | Out-File -FilePath "temp-order-service.yml" -Encoding utf8
            kubectl apply -f temp-order-service.yml
            
            # Process and apply frontend-config
            Write-Host "Processing frontend-config manifest..."
            $frontendConfigYaml = Get-Content infrastructure/k8s/frontend-config.yml -Raw
            $frontendConfigYaml = $frontendConfigYaml.Replace('${NAMESPACE}', $namespace)
            $frontendConfigYaml = $frontendConfigYaml -replace 'name: frontend-config', "name: frontend-config$suffix"
            $frontendConfigYaml = $frontendConfigYaml -replace 'app: frontend', "app: frontend$suffix"
            $frontendConfigYaml | Out-File -FilePath "temp-frontend-config.yml" -Encoding utf8
            kubectl apply -f temp-frontend-config.yml

            # Create explicit ConfigMap with all required variables for frontend using kubectl create command
            Write-Host "Creating explicit frontend ConfigMap with all required variables..."
            $configMapName = "frontend$suffix-config"
            
            # Check if ConfigMap exists and delete it if it does
            $cmExists = kubectl get configmap $configMapName -n $namespace --ignore-not-found
            if ($cmExists) {
              Write-Host "ConfigMap $configMapName already exists, deleting it..."
              kubectl delete configmap $configMapName -n $namespace
            }
            
            # Create the ConfigMap using kubectl command
            kubectl create configmap $configMapName `
              --namespace=$namespace `
              --from-literal=VITE_API_BASE_URL="http://$apiHost" `
              --from-literal=VITE_USER_SERVICE_URL="http://$apiHost/users" `
              --from-literal=VITE_ORDER_SERVICE_URL="http://$apiHost/orders"
            
            # Add a label to the ConfigMap
            kubectl label configmap $configMapName app=frontend$suffix -n $namespace
            
            # Process and apply frontend-deployment
            Write-Host "Processing frontend-deployment manifest..."
            $frontendDeploymentYaml = Get-Content infrastructure/k8s/frontend-deployment.yml -Raw
            $frontendDeploymentYaml = $frontendDeploymentYaml.Replace('${NAMESPACE}', $namespace)
            $frontendDeploymentYaml = $frontendDeploymentYaml.Replace('${VERSION}', $imageTag)
            $frontendDeploymentYaml = $frontendDeploymentYaml -replace 'name: frontend', "name: frontend$suffix"
            $frontendDeploymentYaml = $frontendDeploymentYaml -replace 'app: frontend', "app: frontend$suffix"
            
            # Fix the ConfigMap reference in the frontend deployment
            $frontendDeploymentYaml = $frontendDeploymentYaml -replace 'frontend-config', "frontend$suffix-config"
            
            $frontendDeploymentYaml | Out-File -FilePath "temp-frontend-deployment.yml" -Encoding utf8
            kubectl apply -f temp-frontend-deployment.yml
            
            # Process and apply ingress
            Write-Host "Processing ingress manifest..."
            $ingressYaml = Get-Content infrastructure/k8s/ingress.yml -Raw
            $ingressYaml = $ingressYaml.Replace('${NAMESPACE}', $namespace)
            $ingressYaml = $ingressYaml.Replace('${FRONTEND_HOST}', $frontendHost)
            $ingressYaml = $ingressYaml.Replace('${API_HOST}', $apiHost)
            $ingressYaml = $ingressYaml.Replace('${FRONTEND_SERVICE}', $frontendService)
            $ingressYaml = $ingressYaml.Replace('${USER_SERVICE}', $userService)
            $ingressYaml = $ingressYaml.Replace('${ORDER_SERVICE}', $orderService)
            $ingressYaml = $ingressYaml -replace 'name: microservices-ingress', "name: microservices-ingress$suffix"
            $ingressYaml | Out-File -FilePath "temp-ingress.yml" -Encoding utf8
            Write-Host "Applying ingress configuration..."
            kubectl apply -f temp-ingress.yml
            
            # Clean up temporary files
            Remove-Item temp-*.yml
          }

          Write-Host "Waiting for services to initialize..."
          Start-Sleep -Seconds 30

      - name: Install Prometheus Operator (optional - for monitoring)
        shell: powershell
        run: |
          Write-Host "Installing Prometheus Operator for monitoring capabilities..."

          # Créer un namespace pour le monitoring s'il n'existe pas
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

          # Installer Prometheus Operator via Helm (si vous avez Helm configuré)
          try {
            # Vérifier si Helm est installé
            $helmInstalled = $null
            try { $helmInstalled = helm version } catch { }
            
            if ($helmInstalled) {
              Write-Host "Installing Prometheus using Helm..."
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo update
              helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring
              
              Write-Host "Waiting for Prometheus Operator CRDs to be ready..."
              Start-Sleep -Seconds 60
              
              # Méthode 1: Utiliser kustomize pour appliquer les configurations de monitoring
              Write-Host "Applying monitoring configuration using kustomize..."
              kubectl apply -k infrastructure/k8s/monitoring/
              
              # Méthode 2 (alternative): Appliquer les fichiers individuellement
              <#
              # Appliquer nos fichiers de configuration de monitoring personnalisés
              Write-Host "Applying custom monitoring configurations..."
              if (Test-Path infrastructure/k8s/monitoring/monitoring-ingress.yml) {
                kubectl apply -f infrastructure/k8s/monitoring/monitoring-ingress.yml
              }
              
              if (Test-Path infrastructure/k8s/monitoring/prometheus-alerts.yml) {
                kubectl apply -f infrastructure/k8s/monitoring/prometheus-alerts.yml
              }
              
              if (Test-Path infrastructure/k8s/monitoring/grafana-dashboard-cm.yml) {
                kubectl apply -f infrastructure/k8s/monitoring/grafana-dashboard-cm.yml
              }
              
              if (Test-Path infrastructure/k8s/monitoring/service-monitors.yml) {
                Write-Host "Applying service monitors..."
                kubectl apply -f infrastructure/k8s/monitoring/service-monitors.yml -n monitoring
              }
              
              if (Test-Path infrastructure/k8s/monitoring/traffic-generator.yml) {
                Write-Host "Deploying traffic generator..."
                kubectl apply -f infrastructure/k8s/monitoring/traffic-generator.yml -n microservices
              }
              #>
              
              Write-Host "Monitoring setup complete."
            } else {
              Write-Host "Helm not found, skipping Prometheus installation."
              Write-Host "To monitor your app, please install Prometheus Operator manually."
            }
          } catch {
            Write-Host "Error installing Prometheus: $_"
            Write-Host "Continuing without monitoring capabilities."
          }

      - name: Force redeploy services
        shell: powershell
        run: |
          Write-Host "Forcing redeployment of services..."
          $namespace = "${{ steps.deployment-env.outputs.namespace }}"
          $suffix = "${{ steps.deployment-env.outputs.deployment_suffix }}"

          # Restart deployments to ensure latest version is used
          try {
            kubectl rollout restart deployment/user-service$suffix -n $namespace
            Write-Host "User service deployment restarted"
          } catch {
            Write-Host "Warning: Failed to restart user-service$suffix deployment: $_"
          }

          try {
            kubectl rollout restart deployment/order-service$suffix -n $namespace
            Write-Host "Order service deployment restarted"
          } catch {
            Write-Host "Warning: Failed to restart order-service$suffix deployment: $_"
          }

          try {
            kubectl rollout restart deployment/frontend$suffix -n $namespace
            Write-Host "Frontend deployment restarted"
          } catch {
            Write-Host "Warning: Failed to restart frontend$suffix deployment: $_"
          }

          # For stateful applications like Kafka, we don't restart to avoid data loss

          Write-Host "Waiting for services to stabilize..."
          # Wait for a bit to allow services to stabilize
          Start-Sleep -Seconds 60

      - name: Verify deployment
        shell: powershell
        run: |
          Write-Host "Verifying deployments..."
          $namespace = "${{ steps.deployment-env.outputs.namespace }}"
          $suffix = "${{ steps.deployment-env.outputs.deployment_suffix }}"

          # Vérification des pods sans échouer le workflow
          Write-Host "Checking pod status in namespace: $namespace"
          kubectl get pods -n $namespace

          # Afficher les détails des pods de services pour diagnostic
          Write-Host "User service pod details:"
          kubectl describe pods -n $namespace -l app=user-service$suffix

          Write-Host "Order service pod details:"
          kubectl describe pods -n $namespace -l app=order-service$suffix

          Write-Host "Frontend pod details:"
          kubectl describe pods -n $namespace -l app=frontend$suffix

          # Forcer le succès du job même si les services ne sont pas encore prêts
          Write-Host "Deployment verification completed - continuing regardless of readiness"
          exit 0

      - name: Verify service endpoints
        shell: powershell
        run: |
          Write-Host "Checking service endpoints..."

          # List services
          kubectl get services -n ${{ steps.deployment-env.outputs.namespace }}

          # Get ingress details 
          kubectl get ingress -n ${{ steps.deployment-env.outputs.namespace }}

          # Check events for issues in the namespace
          Write-Host "Checking events in ${{ steps.deployment-env.outputs.namespace }} namespace..."
          kubectl get events -n ${{ steps.deployment-env.outputs.namespace }}

      - name: Check pod status and logs
        shell: powershell
        run: |
          Write-Host "Waiting for pods to be created..."
          Start-Sleep -Seconds 30

          Write-Host "Checking pod status..."
          kubectl get pods -n ${{ steps.deployment-env.outputs.namespace }}

          Write-Host "Checking user-service pods..."
          $userPods = kubectl get pods -n ${{ steps.deployment-env.outputs.namespace }} -l app=user-service$suffix -o jsonpath="{.items[*].metadata.name}"
          if ($userPods) {
            foreach ($pod in $userPods.Split()) {
              Write-Host "Logs for ${pod}:"
              kubectl logs ${pod} -n ${{ steps.deployment-env.outputs.namespace }} --tail=50
            }
          } else {
            Write-Host "No user-service pods found"
          }

          Write-Host "Checking order-service pods..."
          $orderPods = kubectl get pods -n ${{ steps.deployment-env.outputs.namespace }} -l app=order-service$suffix -o jsonpath="{.items[*].metadata.name}"
          if ($orderPods) {
            foreach ($pod in $orderPods.Split()) {
              Write-Host "Logs for ${pod}:"
              kubectl logs ${pod} -n ${{ steps.deployment-env.outputs.namespace }} --tail=50
            }
          } else {
            Write-Host "No order-service pods found"
          }

      - name: Wait for services to stabilize
        shell: powershell
        run: |
          Write-Host "Waiting for services to stabilize before verification (6 minutes)..."
          Start-Sleep -Seconds 360

          Write-Host "Checking pod status after waiting period:"
          kubectl get pods -n ${{ steps.deployment-env.outputs.namespace }}

          # Get pod creation timestamp and current time
          Write-Host "Pod ages:"
          kubectl get pods -n ${{ steps.deployment-env.outputs.namespace }} -o custom-columns=NAME:.metadata.name,CREATED:.metadata.creationTimestamp

          # Display pod logs for diagnostics
          Write-Host "Checking service logs:"
          Write-Host "User Service Logs:"
          $userPod = kubectl get pods -n ${{ steps.deployment-env.outputs.namespace }} -l app=user-service$suffix -o jsonpath="{.items[0].metadata.name}"
          if ($userPod) {
            kubectl logs -n ${{ steps.deployment-env.outputs.namespace }} $userPod --tail=50
          }

          Write-Host "Order Service Logs:"
          $orderPod = kubectl get pods -n ${{ steps.deployment-env.outputs.namespace }} -l app=order-service$suffix -o jsonpath="{.items[0].metadata.name}"
          if ($orderPod) {
            kubectl logs -n ${{ steps.deployment-env.outputs.namespace }} $orderPod --tail=50
          }

      - name: Validate Kubernetes manifests
        shell: powershell
        run: |
          Write-Host "Validating Kubernetes manifests..."

          # Vérifier la duplication des ressources
          $resourceMap = @{}

          Get-ChildItem -Path "infrastructure/k8s/*.yml" | ForEach-Object {
            $manifest = Get-Content $_.FullName -Raw
            $documents = $manifest -split "---\r?\n"
            
            foreach ($doc in $documents) {
              if ($doc.Trim() -ne "") {
                try {
                  $yamlObj = ConvertFrom-Json $doc -AsHashtable
                  if ($yamlObj -and $yamlObj.kind -and $yamlObj.metadata -and $yamlObj.metadata.name) {
                    $resourceKey = "$($yamlObj.kind)/$($yamlObj.metadata.name)"
                    
                    if ($resourceMap.ContainsKey($resourceKey)) {
                      Write-Warning "Duplicated resource found: $resourceKey in files: $($resourceMap[$resourceKey]) and $($_.Name)"
                    } else {
                      $resourceMap[$resourceKey] = $_.Name
                    }
                  }
                } catch {
                  Write-Warning "Could not parse YAML in $($_.Name): $_"
                }
              }
            }
          }

          # Valider avec kubectl
          Get-ChildItem -Path "infrastructure/k8s/*.yml" | ForEach-Object {
            Write-Host "Validating $($_.Name)..."
            kubectl apply --dry-run=client -f $_.FullName
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "Validation failed for $($_.Name)"
            }
          }

          Write-Host "Manifest validation completed"

      - name: Check Kubernetes connection
        shell: powershell
        run: |
          Write-Host "Checking Kubernetes connection..."
          if (Test-Path -Path "$HOME/.kube") {
            Write-Host "Kubernetes connection is established."
          } else {
            Write-Host "Kubernetes connection is not established."
          }

      - name: Generate deployment summary
        shell: powershell
        run: |
          $branchName = "${{ steps.branch.outputs.name }}"
          $namespace = "${{ steps.deployment-env.outputs.namespace }}"
          $isFeatureBranch = $branchName -like 'feature/*'

          Write-Host "::group::Deployment Summary"
          Write-Host "Deployment for branch: $branchName completed"
          Write-Host "Namespace: $namespace"

          if ($isFeatureBranch) {
            $apiHost = "api-$namespace.microservices.local"
            $frontendHost = "frontend-$namespace.microservices.local"
            Write-Host "API Endpoint: http://$apiHost"
            Write-Host "Frontend URL: http://$frontendHost"
            Write-Host "To access these URLs, add the following to your hosts file:"
            Write-Host "127.0.0.1 $apiHost $frontendHost"
          } else {
            Write-Host "API Endpoint: http://api.microservices.local"
            Write-Host "Frontend URL: http://frontend.microservices.local"
          }

          Write-Host "Services deployed:"
          kubectl get pods -n $namespace
          Write-Host "::endgroup::"

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.event.workflow_run.head_branch || github.ref }}

      - name: Get branch name
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.branch }}" != "" ]]; then
            # For workflow_dispatch events with branch input
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # For workflow_run events
            BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          else
            # For direct push or workflow_dispatch without branch input
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi

          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name: $BRANCH_NAME"

          # Set image tag based on branch
          if [[ "$BRANCH_NAME" == feature/* ]]; then
            # Convert feature/name to feature-name for tag
            TAG_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
            echo "image_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.branch.outputs.image_tag }}
          build-args: |
            VITE_ENVIRONMENT=kubernetes
            VITE_API_BASE_URL=http://api.microservices.local
            VITE_USER_SERVICE_URL=http://api.microservices.local/users
            VITE_ORDER_SERVICE_URL=http://api.microservices.local/orders
